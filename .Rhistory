fit <- gausspr(y ~ x, kernel = method)
resid <- y - predict(fit)
}
test <- cor.test(resid, x)
if (verbose){print(test$p.value)}
if (test$p.value > thres/alpha){
return(1) #residuals are independent of x (no endogeneity)
} else {
return(0) #residuals are dependent of x (endogeneity)
}
}
########### Simulating Data ###########
#Case 1: X -> Y and both X and Y are time sequence (AR(1))
case1_norm <- function (q1 = 1, q2 = 1, nonlinear = 0, ar = c(0,0), linear = 0.4, n = 300){
#ar: list of ar parameters (we should assume non unit-root otherwise we suffer from spurious correlation)
#q: error size (q = 1: normal/ q > 1 or q < 1 yields super- or sub-Gaussian)
#linear: linear effect of x -> y
#nonlinear: strength of non-linearity
#n: sample size (default 300 as in the paper)
x <- c(); y <- c()
xnoise <- rnorm(1); ynoise <- rnorm(1)
x[1] <- sign(xnoise)*abs(xnoise)^q1
y[1] <- sign(ynoise)*abs(ynoise)^q2 + linear*as.numeric(x[1]) + nonlinear*as.numeric(x[1])^3
for (i in 2:n){
xnoise <- rnorm(1); ynoise <- rnorm(1)
x[i] <- sign(xnoise)*abs(xnoise)^q1 + ar[1]*as.numeric(x[i-1])
y[i] <- sign(ynoise)*abs(ynoise)^q2 + ar[2]*as.numeric(y[i-1]) + linear*as.numeric(x[i]) + nonlinear*as.numeric(x[i])^3
}
df <- data.frame(x = x, y = y)
return(df)
}
case1 <- case1_norm(linear = 1.0, ar = c(0,0))
plot(case1$x, case1$y)
plot(case1$x, type = "l", col = "red", ylim = c(-15,15))
lines(case1$y, col = "blue")
causality2_gp(case1$x, case1$y, verbose = TRUE)
causality2_gp(case1$y, case1$x, verbose = TRUE)
causality2_gp(case1$x, case1$y, confound = FALSE, verbose = TRUE)
causality2_gp(case1$y, case1$x, confound = FALSE, verbose = TRUE)
case1 <- case1_norm(linear = 1.0, ar = c(0,0))
plot(case1$x, case1$y)
plot(case1$x, type = "l", col = "red", ylim = c(-15,15))
lines(case1$y, col = "blue")
causality2_gp(case1$x, case1$y, verbose = TRUE)
causality2_gp(case1$y, case1$x, verbose = TRUE)
causality2_gp(case1$x, case1$y, confound = FALSE, verbose = TRUE)
causality2_gp(case1$y, case1$x, confound = FALSE, verbose = TRUE)
case1 <- case1_norm(linear = 1.0, ar = c(0,0))
plot(case1$x, case1$y)
plot(case1$x, type = "l", col = "red", ylim = c(-15,15))
lines(case1$y, col = "blue")
causality2_gp(case1$x, case1$y, verbose = TRUE)
causality2_gp(case1$y, case1$x, verbose = TRUE)
causality2_gp(case1$x, case1$y, confound = FALSE, verbose = TRUE)
causality2_gp(case1$y, case1$x, confound = FALSE, verbose = TRUE)
detectCores()
#Note: Assuming we know the conditional independence...
exp_xy <- function(generate,causal, qrange = 1, brange = 1, iter = 100, confounder = FALSE){
#generate: function to generate the data
#causal: function to check causality
#qrange: column of parameter for Gaussian
#brange: column of parameter for non-linearity (cube coefficient)
param <- cbind(q2 = qrange, b = brange)
res <- apply(param, 1, function(p){case1_norm(q2 = p[1], nonlinear = p[2])})
mclapply(res, causal)
}
qrange = c(1,2)
brange = c(0,1)
param <- cbind(q1 = qrange, q2 = qrange, b = brange)
res <- apply(param, 1, function(p){case1_norm(q2 = p[1], nonlinear = p[2])})
mclapply(res, causal)
mclapply(res, causality2_gp)
res
#generate: function to generate the data
#causal: function to check causality
#qrange: column of parameter for Gaussian
#brange: column of parameter for non-linearity (cube coefficient)
param <- cbind(q2 = qrange, b = brange)
param
res
#Note: Assuming we know the conditional independence...
exp_xy <- function(qrange = 1, brange = 1, iter = 100, confounder = FALSE){
#generate: function to generate the data
#causal: function to check causality
#qrange: column of parameter for Gaussian
#brange: column of parameter for non-linearity (cube coefficient)
param <- cbind(q2 = qrange, b = brange)
res <- apply(param, 1, function(p){case1_norm(q2 = p[1], nonlinear = p[2])})
lapply(res, causal)
}
param <- cbind(q2 = qrange, b = brange)
res <- apply(param, 1, function(p){case1_norm(q2 = p[1], nonlinear = p[2])})
lapply(res, causal)
lapply(res, causality2_gp)
lapply(res, causality2_gp(x = res[1], y = res[2]))
res
res[1]
res[1][[1]]
res[1]
res$1
apply(res, 1, causality2_gp(x = res[1], y = res[2]))
last_error
rlang::last_error()
map(res, causality2_gp(x = res[1], y = res[2]))
?map
res
proc_xy <- function(p){
data <- case1_norm(q2 = p[1], nonlinear = p[2])
sum1 <- causality2_gp(data$x, data$y)
sum2 <- causality2_gp(data$x, data$y)
return(cbind(sum1,sum2))
}
param <- cbind(q2 = qrange, b = brange)
res <- apply(param, 1, proc_xy)
res
proc_xy <- function(p){
data <- case1_norm(q2 = p[1], nonlinear = p[2])
sum1 <- causality2_gp(data$x, data$y)
sum2 <- causality2_gp(data$y, data$x)
sum3 <- causality2_gp(data$x, data$y, confound = TRUE)
sum4 <- causality2_gp(data$y, data$x, confound = TRUE)
return(cbind(sum1,sum2))
}
param <- cbind(q2 = qrange, b = brange)
res <- apply(param, 1, proc_xy)
proc_xy <- function(p){
data <- case1_norm(q2 = p[1], nonlinear = p[2])
sum1 <- causality2_gp(data$x, data$y)
sum2 <- causality2_gp(data$y, data$x)
sum3 <- causality2_gp(data$x, data$y, confound = TRUE)
sum4 <- causality2_gp(data$y, data$x, confound = TRUE)
return(cbind(sum1,sum2,sum3,sum4))
}
param <- cbind(q2 = qrange, b = brange)
res <- apply(param, 1, proc_xy)
res
proc_xy <- function(p){
data <- case1_norm(q2 = p[1], nonlinear = p[2])
sum1 <- causality2_gp(data$x, data$y)
sum2 <- causality2_gp(data$y, data$x)
sum3 <- causality2_gp(data$x, data$y, confound = TRUE)
sum4 <- causality2_gp(data$y, data$x, confound = TRUE)
return(rbind(sum1,sum2,sum3,sum4))
}
param <- cbind(q2 = qrange, b = brange)
res <- apply(param, 1, proc_xy)
res
proc_xy <- function(p){
data <- case1_norm(q2 = p[1], nonlinear = p[2])
sum1 <- causality2_gp(data$x, data$y)
sum2 <- causality2_gp(data$y, data$x)
sum3 <- causality2_gp(data$x, data$y, confound = TRUE)
sum4 <- causality2_gp(data$y, data$x, confound = TRUE)
return(cbind(sum1,sum2,sum3,sum4))
}
proc_xy <- function(p){
data <- case1_norm(q2 = p[1], nonlinear = p[2])
sum1 <- causality2_gp(data$x, data$y)
sum2 <- causality2_gp(data$y, data$x)
sum3 <- causality2_gp(data$x, data$y, confound = TRUE)
sum4 <- causality2_gp(data$y, data$x, confound = TRUE)
return(c(sum1,sum2,sum3,sum4))
}
param <- cbind(q2 = qrange, b = brange)
res <- apply(param, 1, proc_xy)
res
param
qrange = seq(0.5,1.5,0.1)
qrange = seq(0.5,1.5,0.1)
brange = seq(-1,1,0.1)
param <- cbind(q2 = qrange, b = brange)
param
expand_grid(qrange)
expand_grid(qrange, brange)
param <- expand_grid(qrange, brange)
res <- apply(param, 1, proc_xy)
proc_xy <- function(p){
data <- case1_norm(q2 = p[1], nonlinear = p[2])
sum1 <- causality2_gp(data$x, data$y)
sum2 <- causality2_gp(data$y, data$x)
sum3 <- causality2_gp(data$x, data$y, confound = TRUE)
sum4 <- causality2_gp(data$y, data$x, confound = TRUE)
return(c(p[1], p[2], sum1,sum2,sum3,sum4))
}
qrange = seq(0.5,1.5,0.1)
brange = seq(-1,1,0.1)
param <- expand_grid(qrange, brange)
res <- apply(param, 1, proc_xy)
res
param <- data.frame(q2 = qrange, b = 1)
param
apply(param, 1, proc_xy)
d <- mclapply(1:10000, function(i) {
x <- runif(10)
x <- f(x)
max(x) - min(x)
}, mc.cores = 2)
d
f <- function(x) { log(x) }
d <- mclapply(1:10000, function(i) {
x <- runif(10)
x <- f(x)
max(x) - min(x)
}, mc.cores = 2)
f <- function(x) { log(x) }
d <- mclapply(1:10000, function(i) {
x <- runif(10)
x <- f(x)
max(x) - min(x)
}, mc.cores = 2)
library(tidyverse)
library(parallel)
library(GauPro) #Gaussian Process
library(kernlab) #Gaussian Process (gausspr)
library(GPfit) #Gaussian Process
library(CondIndTests) #non-linear conditional independence tests
f <- function(x) { log(x) }
d <- mclapply(1:10000, function(i) {
x <- runif(10)
x <- f(x)
max(x) - min(x)
}, mc.cores = 2)
d
proc_xy <- function(p){
data <- case1_norm(q2 = p[1], nonlinear = p[2])
sum1 <- causality2_gp(data$x, data$y)
sum2 <- causality2_gp(data$y, data$x)
sum3 <- causality2_gp(data$x, data$y, confound = TRUE)
sum4 <- causality2_gp(data$y, data$x, confound = TRUE)
return(c(p[1], p[2], sum1,sum2,sum3,sum4))
}
res <- mlcapply(1:100, function(i) {
apply(param, 1, proc_xy)
}, mc.cores = 4)
qrange = seq(0.5,1.5,0.1)
param <- data.frame(q2 = qrange, b = 1)
res <- mclapply(1:100, function(i) {
apply(param, 1, proc_xy)
}, mc.cores = 4)
res
apply(res,1,sum)
apply(res,0,sum)
?lapply
lapply(res,sum)
res
lapply(res,colSums)
lapply(res,rowSums)
res
res[1]
res[1] + res[2]
res[2]
matrix(res[1])
as.matrix(res[1])
res[1]
lapply(res, function(x){sum(x[1])})
lapply(lapply(res, function(x){sum(x[1])}), sum())
sum(lapply(res, function(x){sum(x[1])}))
lapply(res, function(x){sum(x[1])})
lapply(res, function(x){sum(x[1])}) %>% sum()
sapply(res, function(x){sum(x[1])})
sapply(res, function(x){sum(x[1])}) %>% sum()
res[1]
res[1][1]
res[1][1,2]
res[1][[1]]
sapply(res, function(x){sum(x[2])}) %>% sum()
sapply(res, function(x){sum(x[3])}) %>% sum()
sapply(res, function(x){sum(x[4])}) %>% sum()
sapply(res, function(x){sum(x[5])}) %>% sum()
sapply(res, function(x){sum(x[6])}) %>% sum()
sapply(res, function(x){sum(x[7])}) %>% sum()
sapply(res, function(x){sum(x[8])}) %>% sum()
sapply(res, function(x){sum(x[9])}) %>% sum()
sapply(res, function(x){sum(x[10])}) %>% sum()
sapply(res, function(x){sum(x[11])}) %>% sum()
sapply(res, function(x){sum(x[12])}) %>% sum()
sapply(res, function(x){sum(x[13])}) %>% sum()
length(param)
param
nrow(param)
mclapply(1:6*nrow(param), function(i){sapply(res, function(x){sum(x[13])}) %>% sum()})
6*nrow(param)
mclapply(1:66, function(i){sapply(res, function(x){sum(x[13])}) %>% sum()})
mclapply(1:66, function(i){sapply(res, function(x){sum(x[i])}) %>% sum()})
mcsapply
?parallel::parSapply
parsapply(function(i){sapply(res, function(x){sum(x[i])}) %>% sum()}, 1:66)
parSapply(function(i){sapply(res, function(x){sum(x[i])}) %>% sum()}, 1:66)
parSapply(function(i){c1 = NULL, sapply(res, function(x){sum(x[i])}) %>% sum()}, 1:66)
parSapply(c1 = NULL, function(i){sapply(res, function(x){sum(x[i])}) %>% sum()}, 1:66)
parSapply(c1 = NULL, FUN = function(i){sapply(res, function(x){sum(x[i])}) %>% sum()}, 1:66)
parSapply(c1 = 1:66, FUN = function(i){sapply(res, function(x){sum(x[i])}) %>% sum()})
sapply(1:66, FUN = function(i){sapply(res, function(x){sum(x[i])}) %>% sum()})
res
sapply(1:66, FUN = function(i){sapply(res, function(x){sum(x[i])}) %>% sum()})
res_formatted<- sapply(1:nrow(param), FUN = function(i){sapply(res, function(x){sum(x[i])}) %>% sum()})
res_formatted
param
res_formatted<- sapply(1:6*nrow(param), FUN = function(i){sapply(res, function(x){sum(x[i])}) %>% sum()})
res[1]
res_formatted
res_formatted<- sapply(1:6*nrow(param), FUN = function(i){sapply(res, function(x){sum(x[i])}) %>% sum()})
res_formatted
6*nrow(param)
res_formatted<- sapply(1:(6*nrow(param)), FUN = function(i){sapply(res, function(x){sum(x[i])}) %>% sum()})
res_formatted
res_formatted<- sapply(1:(6*nrow(param)), FUN = function(i){sapply(res, function(x){sum(x[i])}) %>% sum()}) %>%
matrix(nrow = 6)
res_formatted
res_formatted
res_formatted<- sapply(1:(6*nrow(param)), FUN = function(i){sapply(res, function(x){sum(x[i])}) %>% sum()}) %>%
matrix(nrow = 6) %>%
data.frame()
res_formatted
res_formatted<- sapply(1:(6*nrow(param)), FUN = function(i){sapply(res, function(x){sum(x[i])}) %>% sum()}) %>%
matrix(nrow = 6) %>%
t() %>%
data.frame()
res_formatted
colnames(res_formatted) <- c("q2", "b", "f","b""f_c","b_c")
colnames(res_formatted) <- c("q2", "b", "f","b","f_c","b_c")
res_formatted
res_formatted %>%
select(-b) %>%
ggplot(aes(x = q2))
########### Simulating Data ###########
#Case 1: X -> Y and both X and Y are time sequence (AR(1))
case1_norm <- function (q1 = 1, q2 = 1, nonlinear = 0, ar = c(0,0), linear = 1.0, n = 300){
#ar: list of ar parameters (we should assume non unit-root otherwise we suffer from spurious correlation)
#q: error size (q = 1: normal/ q > 1 or q < 1 yields super- or sub-Gaussian)
#linear: linear effect of x -> y
#nonlinear: strength of non-linearity
#n: sample size (default: 300 as in the paper)
x <- c(); y <- c()
xnoise <- rnorm(1); ynoise <- rnorm(1)
x[1] <- sign(xnoise)*abs(xnoise)^q1
y[1] <- sign(ynoise)*abs(ynoise)^q2 + linear*as.numeric(x[1]) + nonlinear*as.numeric(x[1])^3
for (i in 2:n){
xnoise <- rnorm(1); ynoise <- rnorm(1)
x[i] <- sign(xnoise)*abs(xnoise)^q1 + ar[1]*as.numeric(x[i-1])
y[i] <- sign(ynoise)*abs(ynoise)^q2 + ar[2]*as.numeric(y[i-1]) + linear*as.numeric(x[i]) + nonlinear*as.numeric(x[i])^3
}
df <- data.frame(x = x, y = y)
return(df)
}
res_formatted
res_formatted %>%
mutate(. = ./100)
res_formatted/100
res_formatted/100 %>%
select(-b) %>%
ggplot(aes(x = q2, y = b))
res_formatted/100 %>%
select(-b) %>%
ggplot(aes(x = q2, y = f)) * geom_line()
res_formatted/100 %>%
ggplot(aes(x = q2, y = f)) * geom_line()
res_formatted
str(res_formatted)
str(res_formatted/100)
res_formatted/100 %>%
ggplot(aes(x = q2, y = f)) + geom_line()
res_formatted <- res_formatted/100
plot(res_formatted$q2, res_formatted$b)
plot(res_formatted$q2, res_formatted$b, type = "l")
colnames(res_formatted) <- c("q2", "b", "forward","backward","f_c","b_c")
plot(res_formatted$q2, res_formatted$forward, type = "l")
plot(res_formatted$q2, res_formatted$backward, type = "l")
plot(res_formatted$q2, res_formatted$f_c, type = "l")
plot(res_formatted$q2, res_formatted$b_c, type = "l")
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1))
plot(res_formatted$q2, res_formatted$backward, type = "l", ylim = c(0,1))
plot(res_formatted$q2, res_formatted$f_c, type = "l", ylim = c(0,1))
plot(res_formatted$q2, res_formatted$b_c, type = "l", ylim = c(0,1))
par(mfrow = c(2,2))
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1))
plot(res_formatted$q2, res_formatted$backward, type = "l", ylim = c(0,1))
plot(res_formatted$q2, res_formatted$f_c, type = "l", ylim = c(0,1))
plot(res_formatted$q2, res_formatted$b_c, type = "l", ylim = c(0,1))
?plot
par(mfrow = c(2,2))
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1))
plot(res_formatted$q2, res_formatted$backward, type = "l", ylim = c(0,1))
plot(res_formatted$q2, res_formatted$f_c, type = "l", ylim = c(0,1))
plot(res_formatted$q2, res_formatted$b_c, type = "l", ylim = c(0,1))
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1))
lines(res_formatted$q2, res_formatted$backward, type = "l", ylim = c(0,1))
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1), col = 1)
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1), col = "red")
lines(res_formatted$q2, res_formatted$backward,  col = "blue")
lines(res_formatted$q2, res_formatted$f_c, col = "green")
lines(res_formatted$q2, res_formatted$b_c, col = "purple")
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1), col = "red")
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1), col = "red")
par(mfrows = c(1,1))
par(mfrow = c(1,1))
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1), col = "red")
lines(res_formatted$q2, res_formatted$backward,  col = "blue")
lines(res_formatted$q2, res_formatted$f_c, col = "green")
lines(res_formatted$q2, res_formatted$b_c, col = "purple")
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1), col = "red")
lines(res_formatted$q2, res_formatted$backward,  col = "blue")
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1), col = "red")
lines(res_formatted$q2, res_formatted$backward,  col = "blue")
legend()
?legend
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1), col = "red")
lines(res_formatted$q2, res_formatted$backward,  col = "blue")
lines(res_formatted$q2, res_formatted$f_c, col = "green")
lines(res_formatted$q2, res_formatted$b_c, col = "purple")
legend(x = 0.2, y = 0.8,
legend = c("forward", "backward", "forward (corrected)", "backward(corrected)"),
col = c("red", "blue", "green", "purple"))
legend(x = 0.6, y = 0.95,
legend = c("forward", "backward", "forward (corrected)", "backward(corrected)"),
col = c("red", "blue", "green", "purple"))
?legend
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1), col = "red")
lines(res_formatted$q2, res_formatted$backward,  col = "blue")
lines(res_formatted$q2, res_formatted$f_c, col = "green")
lines(res_formatted$q2, res_formatted$b_c, col = "purple")
legend(x = 0.6, y = 0.95,
legend = c("forward", "backward", "forward (corrected)", "backward(corrected)"),
lty = 1,
col = c("red", "blue", "green", "purple"))
plot(res_formatted$q2, res_formatted$forward, type = "l", ylim = c(0,1), col = "red")
lines(res_formatted$q2, res_formatted$backward,  col = "blue")
lines(res_formatted$q2, res_formatted$f_c, col = "green")
lines(res_formatted$q2, res_formatted$b_c, col = "purple")
legend(x = 0.5, y = 0.95,
legend = c("forward", "backward", "forward (corrected)", "backward(corrected)"),
lty = 1,
col = c("red", "blue", "green", "purple"))
cf
cd
getwd
getwd()
getwd()
getwd()
setwd("/Users/kentaro/Dropbox/UChicago/3. 2022Spring/STAT37795 Causal Inference for Machine Learning/STAT37795 final project/experiment")
getwd()
###########Installing packages/functions ###########
rm(list = ls())
getwd()
setwd("/Users/kentaro/Dropbox/UChicago/3. 2022Spring/STAT37795 Causal Inference for Machine Learning/STAT37795 final project/experiment")
getwd()
###########Installing packages/functions ###########
source("exp_xy.R")
library(tidyverse)
lagvec <- function(x,lag = 1) dplyr::lag(x, n = lag, default = 0) #to avoid conflict
causality2_gp <- function(x, y, thres = 0.02, alpha = 1, confound = "linear", verbose = FALSE, method = "rbfdot"){
#checking causality between two variables using kernel regression assuming AR(1) using Gaussian Process
#thres: threshold to accept/reject hypothesis (0.02 is the default in the paper)
#alpha: optional arg to correct the significance (bonferroni correction)
#confound: optional arg for confounding correction (from residual regression, according to FWL theorem)
#method: you should use gausspr package as it is fast
#options: rbfdot, polydot,vanilladot, tanhdot, laplacedot,besseldot,anovadot,splinedot
if (confound == "linear"){
x <- resid(lm(x ~ lagvec(x)))
#y <- resid(lm(y ~ lagvec(x))) #other options
#y <- resid(lm(y ~ lagvec(y)))
} else if (confound == "nonlinear"){
fit <- gausspr(x ~ lagvec(x), kernel = method, cross = 300)
resid <- y - predict(fit)
}
if (method == "GP_fit") {
fit <- GP_fit(x, y)
resid <- y - predict(fit)$Y_hat
} else if (method == "GauPro") {
fit <- GauPro(x, y, parallel=FALSE)
resid <- y - fit$predict(x)
} else if (method == "TPS") {
fit <- Tps(x,y)
resid <- y - predict(fit)
}  else {
fit <- gausspr(y ~ x, kernel = method, cross = 300)
resid <- y - predict(fit)
}
test <- cor.test(resid, x)
if (verbose){print(test$p.value)}
if (test$p.value > thres/alpha){
return(1) #residuals are independent of x (no endogeneity)
} else {
return(0) #residuals are dependent of x (endogeneity)
}
}
source("simulation.R") #simulation
################################################################################
########### Experiment ###########
################################################################################
proc_xy <- function(p){
data <- case1_norm(q1 = p[1], q2 = p[1], nonlinear = p[2], ar = c(p[3],p[4]), linear = p[5])
sum1 <- causality2_gp(data$x, data$y, confound = FALSE) #forward without confounding correction
sum2 <- causality2_gp(data$y, data$x, confound = FALSE) #backward without confounding correction
sum3 <- causality2_gp(data$x, data$y) #forward with confounding correction
sum4 <- causality2_gp(data$y, data$x) #backward with confounding correction
return(c(p[1], p[2], p[3], p[4], p[5], sum1,sum2,sum3,sum4))
}
qrange = 1 #q2
brange = 1
arx = seq(0,1,0.1)
ary = seq(0,1,0.1)
linear = 1
iter = 3
param <- expand_grid(q2 = qrange, b = brange, arx = arx, ary = ary, linear = linear)
#######################################
#warning: the code below might take some time
res <- mclapply(1:iter, function(i) {apply(param, 1, proc_xy)}, mc.cores = 4) #check your cores before you run
library(parallel)
#######################################
#warning: the code below might take some time
res <- mclapply(1:iter, function(i) {apply(param, 1, proc_xy)}, mc.cores = 4) #check your cores before you run
